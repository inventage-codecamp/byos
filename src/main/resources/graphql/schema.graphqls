type Query {
    allAuthors: [Author!]!
    authorById(id: ID!): Author
    authorsByIds(id: [ID!]!): [[Author]]!
    allBooks(first: Int, after: String, orderBy: OrderBooksBy): BookConnection!
    test: Test!
    allOrders(first: Int): ShopOrderConnection!
    allUsers(first: Int): ShopUserConnection!
    allTrees(first: Int): TreeConnection!
    allBookStores(first: Int): BookStoreConnection!
    booksByYear(publishedin: Int!, first: Int): BookConnection!
    distinguishedAuthors(distinguished: Boolean): [Author!]!
    distinguishedAuthorsList(distinguished: [Boolean]!): [Author!]!
    allProducts(first: Int, after: String, orderBy: OrderProductsBy): ProductConnection!
}

enum SortDirection {
    ASC
    DESC
}

input OrderBooksBy {
    id: SortDirection
    title: SortDirection
    publishedin: SortDirection
}

type Test {
    value: String
}

type Book {
    id: ID!
    title: String!
    publishedin: Int!
    author: Author!
    language: Language!
}

type BookConnection {
    edges: [BookEdge!]!
    totalCount: Int!
}

type BookEdge {
    node: Book!
    cursor: String!
}

# example for connection without pagination
type Author {
    id: ID!
    firstName: String
    lastName: String!
    books(publishedin: Int, first: Int): BookConnection!
    distinguished: Boolean
    publicationLanguages: [Language!]!
}

type BookStore {
    name: String!
    books(first: Int): BookConnection!
    b2b: B2BConnection!
}

type BookStoreConnection {
    edges: [BookStoreEdge!]!
    totalCount: Int!
}

type BookStoreEdge {
    node: BookStore!
    cursor: String!
}

type Book_To_Bookstore {
    book: Book!
    stock: Int
}

type B2BConnection {
    edges: [B2BEdge!]!
    totalCount: Int!
}

type B2BEdge {
    node: Book_To_Bookstore!
    cursor: String!
}

type Language {
    id: ID!
    cd: String!
    description: String
}

type ShopUser {
    user_id: ID!
    username: String!
    email: String!
    orders(first: Int): ShopOrderConnection!
}

type ShopUserConnection {
    edges: [ShopUserEdge!]!
    totalCount: Int!
}

type ShopUserEdge {
    node: ShopUser!
    cursor: String!
}

type ShopOrder {
    order_id: ID!
    order_number: String!
    user: ShopUser
    order_date: String!
}

type ShopOrderConnection {
    edges: [ShopOrderEdge!]!
    totalCount: Int!
}

type ShopOrderEdge {
    node: ShopOrder!
    cursor: String!
}

type Tree {
    id: ID!
    label: String!
    parent: Tree
    children(first: Int): TreeConnection!
}

type TreeConnection {
    edges: [TreeEdge!]!
    totalCount: Int!
}

type TreeEdge {
    node: Tree!
    cursor: String!
}

type Product {
    id: ID!
    name: String!
    price: Float!
    category: String!
}

input OrderProductsBy {
    id: SortDirection
    name: SortDirection
    price: SortDirection
    category: SortDirection
}

type ProductConnection {
    edges: [ProductEdge!]!
    totalCount: Int!
}

type ProductEdge {
    node: Product!
    cursor: String!
}
